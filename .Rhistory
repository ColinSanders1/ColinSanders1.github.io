# Assume your dataframe is named 'df' and has the necessary columns
df <- df %>%
mutate(
# Calculate time to plate assuming constant horizontal velocity (vx0)
time_to_plate = plate_distance / vx0,
# Calculate the x, y, z position at the plate using projectile motion equations
x_plate = x0 + vx0 * time_to_plate,
y_plate = z0 + vy0 * time_to_plate + 0.5 * ay * time_to_plate^2,
z_plate = z0 + vz0 * time_to_plate + 0.5 * az * time_to_plate^2,
# Check if the pitch crosses the strike zone horizontally
horizontal_strike = ifelse(x_plate >= xmin & x_plate <= xmax, TRUE, FALSE),
# Check if the pitch crosses the strike zone vertically
vertical_strike = ifelse(z_plate >= ymin & z_plate <= ymax, TRUE, FALSE),
# Combine horizontal and vertical checks
pitch_in_strike_zone = horizontal_strike & vertical_strike
)
# View the result
head(df)
get_trackman_metrics(df)
get_quadratic_coef(df)
df<-get_quadratic_coef(df)
get_trackman_metrics(df)
df<-get_trackman_coef(df)
df<-get_trackman_metrics(df)
zone_percentage <- df %>%
group_by(pitch_type) %>%
summarize(zone_percentage = round(mean(plate_x >= xmin & plate_x <= xmax &
plate_z >= ymin & plate_z <= ymax, na.rm = TRUE) * 100, 2))
View(zone_percentage)
xmin <- -1
xmax <- 1
ymin <- 1.6
ymax <- 3.4
# Add the new column to the dataframe
df <- df %>%
mutate(
inzone = ifelse(plate_x >= xmin & plate_x <= xmax & plate_z >= ymin & plate_z <= ymax, "yes", "no")
)
# View the updated dataframe with the new column
head(df)
data_statsapi<-download_statsapi(
start_date = "2024-01-01",
end_date = "2024-12-01",
level = "aaa"
)
data_statsapi<-download_statsapi(
start_date = "2024-03-29",
end_date = "2024-05-01",
level = "aaa"
)
df<-data_statsapi[["pitch"]]
aaasdb<-dbConnect(drv = SQLite(), "aaa.sqlite")
DBI::dbWriteTable(conn = aaasdb, name = "milb_data", value = df, overwrite = FALSE, append = TRUE)
DBI::dbWriteTable(conn = aaasdb, name = "milb_data", value = df, overwrite = FALSE, append = TRUE)
df<-get_quadratic_coef(df)
df<-get_trackman_metrics(df)
xmin <- -1
xmax <- 1
ymin <- 1.6
ymax <- 3.4
# Add the new column to the dataframe
df <- df %>%
mutate(
inzone = ifelse(plate_x >= xmin & plate_x <= xmax & plate_z >= ymin & plate_z <= ymax, "yes", "no")
)
strike_counts <- df %>%
filter(description %in% c("hit_into_play", "swinging_strike", "foul"), inzone == "yes") %>%
group_by(batter_name) %>%
summarize(
bip = sum(description == "hit_into_play"),
swinging_strikes = sum(description == "swinging_strike"),
foul = sum(description == "foul")
)
View(df)
View(aaasdb)
View(data_statsapi)
df2<-data_statsapi[["event"]]
View(df2)
View(df)
View(df2)
df <- df %>%
left_join(df2, by = c("game_id", "event_index"))
DBI::dbWriteTable(conn = aaasdb, name = "milb_data", value = df, overwrite = TRUE, append = FALSE)
strike_counts <- df %>%
filter(description %in% c("In play, run(s)", "In play, out(s)", "In play, no out", "Swinging Strike", "Foul", "Foul Tip"), inzone == "yes") %>%
group_by(batter_id) %>%
summarize(
bip = sum(description == "In play, run(s)"),
swinging_strikes = sum(description == "Swinging Strike"),
foul = sum(description == "Foul" + description == "Foul Tip")
strike_counts <- df %>%
filter(description %in% c("In play, run(s)", "In play, out(s)", "In play, no out", "Swinging Strike", "Foul", "Foul Tip"), inzone == "yes") %>%
group_by(batter_id) %>%
summarize(
bip = sum(description == "In play, run(s)"),
swinging_strikes = sum(description == "Swinging Strike"),
foul = sum(description == "Foul", "Foul Tip")
)
strike_counts <- df %>%
filter(description %in% c("In play, run(s)", "In play, out(s)", "In play, no out", "Swinging Strike", "Foul", "Foul Tip"), inzone == "yes") %>%
group_by(batter_id) %>%
summarize(
bip = sum(description == "In play, run(s)"),
swinging_strikes = sum(description == "Swinging Strike"),
foul = sum(description == "Foul"), foul_tip = sum(description == "Foul Tip")
)
View(strike_counts)
strike_counts <- df %>%
filter(description %in% c("In play, run(s)", "In play, out(s)", "In play, no out", "Swinging Strike", "Foul", "Foul Tip"), inzone == "yes") %>%
group_by(batter_id) %>%
summarize(
bip1 = sum(description == "In play, run(s)"),
bip2 = sum(description == "In play out(s)"),
bip3 = sum(description == "In play, no out"),
swinging_strikes = sum(description == "Swinging Strike"),
foul = sum(description == "Foul"),
foul_tip = sum(description == "Foul Tip")
)
View(df2)
strike_counts
strike_counts$whiff_pct<-c(strike_counts$swinging_strikes/(strike_counts$bip1 + strike_counts$swinging_strikes + strike_counts$foul + strike_counts$bip2 + strike_counts$bip3 + strike_counts$foul_tip)) *100
View(strike_counts)
chase_percent <- df %>%
filter(inzone == "no") %>%
group_by(batter_id) %>%
summarize(
total_pitches = n(),  # Total number of pitches with inzone = "no"
bip1 = sum(description == "In play, run(s)"),
bip2 = sum(description == "In play out(s)"),
bip3 = sum(description == "In play, no out"),
swinging_strikes = sum(description == "Swinging Strike"),
foul = sum(description == "Foul"),
foul_tip = sum(description == "Foul Tip"),
chase_percentage = (swinging_strikes + foul + bip1 + bip2 + bip3 + foul_tip) / total_pitches * 100  # Calculate chase%
)
View(chase_percent)
final_df <- strike_counts %>%
left_join(chase_percent %>% select(batter_id, chase_percentage), by = "batter_id")
View(final_df)
final_df <- final_df %>%
mutate(
z_chase = -1 * (chase_percentage - 27.1) / 7.0,
z_whiff = -1 * (whiff_pct - 16.7) / 6.9
)
final_df <- final_df %>%
mutate(
combined_z = z_chase + z_whiff
)
final_df <- final_df %>%
mutate(
hit_tool_grade = 50 + (combined_z * 10)
)
data_statsapi<-download_statsapi(
start_date = "2024-05-02",
end_date = "2024-06-01",
level = "aaa"
)
df<-data_statsapi[["pitch"]]
df2<-data_statsapi[["event"]]
df <- df %>%
left_join(df2, by = c("game_id", "event_index"))
df<-get_quadratic_coef(df)
df<-get_trackman_metrics(df)
DBI::dbWriteTable(conn = aaasdb, name = "milb_data", value = df, overwrite = FALSE, append = TRUE)
aaasdb<-dbConnect(drv = SQLite(), "aaa.sqlite")
DBI::dbWriteTable(conn = aaasdb, name = "milb_data", value = df, overwrite = FALSE, append = TRUE)
data_statsapi<-download_statsapi(
start_date = "2024-06-02",
end_date = "2024-07-01",
level = "aaa"
)
df<-data_statsapi[["pitch"]]
df2<-data_statsapi[["event"]]
df <- df %>%
left_join(df2, by = c("game_id", "event_index"))
aaasdb<-dbConnect(drv = SQLite(), "aaa.sqlite")
DBI::dbWriteTable(conn = aaasdb, name = "milb_data", value = df, overwrite = FALSE, append = TRUE)
data_statsapi<-download_statsapi(
start_date = "2024-07-02",
end_date = "2024-08-01",
level = "aaa"
)
df<-data_statsapi[["pitch"]]
df2<-data_statsapi[["event"]]
df <- df %>%
left_join(df2, by = c("game_id", "event_index"))
df<-get_quadratic_coef(df)
df<-get_trackman_metrics(df)
DBI::dbWriteTable(conn = aaasdb, name = "milb_data", value = df, overwrite = FALSE, append = TRUE)
data_statsapi<-download_statsapi(
start_date = "2024-08-02",
end_date = "2024-09-01",
level = "aaa"
)
df<-data_statsapi[["pitch"]]
df2<-data_statsapi[["event"]]
df <- df %>%
left_join(df2, by = c("game_id", "event_index"))
df<-get_quadratic_coef(df)
df<-get_trackman_metrics(df)
DBI::dbWriteTable(conn = aaasdb, name = "milb_data", value = df, overwrite = FALSE, append = TRUE)
data_statsapi<-download_statsapi(
start_date = "2024-09-02",
end_date = "2024-09-22",
level = "aaa"
)
df<-data_statsapi[["pitch"]]
df2<-data_statsapi[["event"]]
df <- df %>%
left_join(df2, by = c("game_id", "event_index"))
df<-get_quadratic_coef(df)
df<-get_trackman_metrics(df)
DBI::dbWriteTable(conn = aaasdb, name = "milb_data", value = df, overwrite = FALSE, append = TRUE)
aaa<-dbGetQuery(aaasdb, "SELECT * FROM milb_data")
df<-dbGetQuery(aaasdb, "SELECT * FROM milb_data")
xmin <- -1
xmax <- 1
ymin <- 1.6
ymax <- 3.4
df <- df %>%
mutate(
inzone = ifelse(plate_x >= xmin & plate_x <= xmax & plate_z >= ymin & plate_z <= ymax, "yes", "no")
)
strike_counts <- df %>%
filter(description %in% c("In play, run(s)", "In play, out(s)", "In play, no out", "Swinging Strike", "Foul", "Foul Tip"), inzone == "yes") %>%
group_by(batter_id) %>%
summarize(
bip1 = sum(description == "In play, run(s)"),
bip2 = sum(description == "In play out(s)"),
bip3 = sum(description == "In play, no out"),
swinging_strikes = sum(description == "Swinging Strike"),
foul = sum(description == "Foul"),
foul_tip = sum(description == "Foul Tip")
)
strike_counts$whiff_pct<-c(strike_counts$swinging_strikes/(strike_counts$bip1 + strike_counts$swinging_strikes + strike_counts$foul + strike_counts$bip2 + strike_counts$bip3 + strike_counts$foul_tip)) *100
chase_percent <- df %>%
filter(inzone == "no") %>%
group_by(batter_id) %>%
summarize(
total_pitches = n(),  # Total number of pitches with inzone = "no"
bip1 = sum(description == "In play, run(s)"),
bip2 = sum(description == "In play out(s)"),
bip3 = sum(description == "In play, no out"),
swinging_strikes = sum(description == "Swinging Strike"),
foul = sum(description == "Foul"),
foul_tip = sum(description == "Foul Tip"),
chase_percentage = (swinging_strikes + foul + bip1 + bip2 + bip3 + foul_tip) / total_pitches * 100  # Calculate chase%
)
final_df <- strike_counts %>%
left_join(chase_percent %>% select(batter_id, chase_percentage), by = "batter_id")
final_df <- final_df %>%
mutate(
z_chase = -1 * (chase_percentage - mean(chase_percentage, na.rm = TRUE)) / sd(chase_percentage, na.rm = TRUE),
z_whiff = -1 * (whiff_pct - mean(whiff_pct, na.rm = TRUE)) / sd(whiff_pct, na.rm = TRUE)
)
# Step 2: Combine z-scores
final_df <- final_df %>%
mutate(
combined_z = z_chase + z_whiff
)
# Step 3: Scale to the 20-80 scale ONLY USE THIS ONE FOR HIT GRADES
final_df <- final_df %>%
mutate(
hit_tool_grade = 50 + (combined_z * 10)
)
View(final_df)
library(readxl)
IDtable <- read_excel("~/Shiny App/IDtable.xlsx")
View(IDtable)
batter_lookup <- IDtable %>%
select(player_id, first_last_name)
View(batter_lookup)
batter_lookup$batter_id<-batter_lookup$player_id
# Perform the join with df1
df1 <- df1 %>%
left_join(batter_lookup, by = "batter_id")
# Perform the join with df1
final_df <- final_df%>%
left_join(batter_lookup, by = "batter_id")
View(batter_lookup)
library(baseballr)
IDtable=chadwick_player_lu()
IDtable=subset(table, pro_played_last > "2016")
IDtable=subset(IDtable, pro_played_last > "2016")
ID=subset(IDtable, key_mlbam > 0)
batter_lookup <- IDtable %>%
select(key_mlbam, name_first, name_last)
batter_lookup$batter_id<-batter_lookup$player_id
batter_lookup$batter_id<-batter_lookup$key_mlbam
# Perform the join with df1
final_df <- final_df%>%
left_join(batter_lookup, by = "batter_id")
final_df$player_id<-NULL
final_df$first_last_name<-NULL
library(googlesheets4)
gs4_auth()
write_sheet(final_df)
df<-dbGetQuery(aaasdb, "SELECT * FROM milb_data")
library(RSQLite)
library(sabRmetrics)
library(DBI)
library(dplyr)
library(baseballr)
library(googlesheets4)
aaasdb<-dbConnect(drv = SQLite(), "aaa.sqlite")
df<-dbGetQuery(aaasdb, "SELECT * FROM milb_data")
View(df)
df <- df %>%
mutate(
is_barrel = case_when(
launch_speed >= 98 & launch_angle >= 26 & launch_angle <= 30 ~ TRUE,
launch_speed >= 99 & launch_angle >= 25 & launch_angle <= 31 ~ TRUE,
launch_speed >= 100 & launch_angle >= 24 & launch_angle <= 32 ~ TRUE,
launch_speed >= 101 & launch_angle >= 23 & launch_angle <= 33 ~ TRUE,
# Expand ranges for higher exit velocities if needed
TRUE ~ FALSE
)
)
barrel_percentage_by_batter <- df %>%
group_by(batter_id) %>%
summarize(
total_bbe = n(),
barrels = sum(is_barrel, na.rm = TRUE),
barrel_percentage = (barrels / total_bbe) * 100
)
View(barrel_percentage_by_batter)
barrel_percentage_by_batter <- df %>%
group_by(batter_id) %>%
summarize(
total_bbe = n(launch_speed),
barrels = sum(is_barrel, na.rm = TRUE),
barrel_percentage = (barrels / total_bbe) * 100
)
barrel_percentage_by_batter <- df %>%
group_by(batter_id) %>%
summarize(
bip1 = sum(description == "In play, run(s)"),
bip2 = sum(description == "In play out(s)"),
bip3 = sum(description == "In play, no out"),
barrels = sum(is_barrel, na.rm = TRUE),
barrel_percentage = (barrels / c(bip1, bip2,bip3)) * 100
)
View(barrel_percentage_by_batter)
barrel_percentage_by_batter <- df %>%
group_by(batter_id) %>%
summarize(
bip1 = sum(description == "In play, run(s)", na.rm = TRUE),
bip2 = sum(description == "In play, out(s)", na.rm = TRUE),
bip3 = sum(description == "In play, no out", na.rm = TRUE),
barrels = sum(is_barrel, na.rm = TRUE),
total_bbe = bip1 + bip2 + bip3,  # Total batted ball events
barrel_percentage = (barrels / total_bbe) * 100
)
final_df <- final_df %>%
left_join(barrel_percentage_by_batter %>% select(batter_id, barrel_percentage), by = "batter_id")
df <- df %>%
mutate(
inzone = ifelse(plate_x >= xmin & plate_x <= xmax & plate_z >= ymin & plate_z <= ymax, "yes", "no")
)
xmin <- -1
xmax <- 1
ymin <- 1.6
ymax <- 3.4
df <- df %>%
mutate(
inzone = ifelse(plate_x >= xmin & plate_x <= xmax & plate_z >= ymin & plate_z <= ymax, "yes", "no")
)
strike_counts <- df %>%
filter(description %in% c("In play, run(s)", "In play, out(s)", "In play, no out", "Swinging Strike", "Foul", "Foul Tip"), inzone == "yes") %>%
group_by(batter_id) %>%
summarize(
bip1 = sum(description == "In play, run(s)"),
bip2 = sum(description == "In play out(s)"),
bip3 = sum(description == "In play, no out"),
swinging_strikes = sum(description == "Swinging Strike"),
foul = sum(description == "Foul"),
foul_tip = sum(description == "Foul Tip")
)
strike_counts$whiff_pct<-c(strike_counts$swinging_strikes/(strike_counts$bip1 + strike_counts$swinging_strikes + strike_counts$foul + strike_counts$bip2 + strike_counts$bip3 + strike_counts$foul_tip)) *100
chase_percent <- df %>%
filter(inzone == "no") %>%
group_by(batter_id) %>%
summarize(
total_pitches = n(),  # Total number of pitches with inzone = "no"
bip1 = sum(description == "In play, run(s)"),
bip2 = sum(description == "In play out(s)"),
bip3 = sum(description == "In play, no out"),
swinging_strikes = sum(description == "Swinging Strike"),
foul = sum(description == "Foul"),
foul_tip = sum(description == "Foul Tip"),
chase_percentage = (swinging_strikes + foul + bip1 + bip2 + bip3 + foul_tip) / total_pitches * 100  # Calculate chase%
)
final_df <- strike_counts %>%
left_join(chase_percent %>% select(batter_id, chase_percentage), by = "batter_id")
final_df <- final_df %>%
left_join(barrel_percentage_by_batter %>% select(batter_id, barrel_percentage), by = "batter_id")
View(final_df)
final_df <- final_df %>%
mutate(
z_chase = -1 * (chase_percentage - mean(chase_percentage, na.rm = TRUE)) / sd(chase_percentage, na.rm = TRUE),
z_whiff = -1 * (whiff_pct - mean(whiff_pct, na.rm = TRUE)) / sd(whiff_pct, na.rm = TRUE),
z_barrel = barrel_percentage - mean(barrel_percentage, na.rm = TRUE)/ sd(barrel_percentage, na.rm = TRUE)
)
# Step 2: Combine z-scores
final_df <- final_df %>%
mutate(
combined_z = z_chase + z_whiff + z_barrel
)
# Step 3: Scale to the 20-80 scale ONLY USE THIS ONE FOR HIT GRADES
final_df <- final_df %>%
mutate(
hit_tool_grade = 50 + (combined_z * 10)
)
final_df <- final_df %>%
mutate(
# Step 1: Calculate z-scores
z_chase = -1 * (chase_percentage - mean(chase_percentage, na.rm = TRUE)) / sd(chase_percentage, na.rm = TRUE),
z_whiff = -1 * (whiff_pct - mean(whiff_pct, na.rm = TRUE)) / sd(whiff_pct, na.rm = TRUE),
z_barrel = (barrel_percentage - mean(barrel_percentage, na.rm = TRUE)) / sd(barrel_percentage, na.rm = TRUE)
) %>%
# Step 2: Combine z-scores
mutate(
combined_z = z_chase + z_whiff + z_barrel
) %>%
# Step 3: Scale to the 20-80 scale
mutate(
hit_tool_grade = 50 + (combined_z * 10)
)
hist(final_df$hit_tool_grade)
IDtable=subset(table, pro_played_last > "2016")
IDtable=subset(IDtable, pro_played_last > "2016")
IDtable=chadwick_player_lu()
IDtable=subset(IDtable, pro_played_last > "2016")
IDtable=subset(IDtable, key_mlbam > 0)
batter_lookup <- IDtable %>%
select(key_mlbam, name_first, name_last)
summary(final_df$hit_tool_grade)
sd(final_df$hit_tool_grade)
gs4_auth()
write_sheet(final_df)
batter_lookup <- IDtable %>%
select(key_mlbam, name_first, name_last)
batter_lookup$batter_id<-batter_lookup$key_mlbam
# Perform the join with df1
final_df <- final_df%>%
left_join(batter_lookup, by = "batter_id")
write_sheet(final_df)
hard_hit_percentage <- df %>%
filter(!is.na(launch_speed)) %>%  # Ensure exit_velocity is not missing
group_by(batter_name) %>%
summarize(
total_batted_balls = sum(!is.na(launch_speed)),  # Total batted balls
hard_hits = sum(launch_speed >= 95, na.rm = TRUE),  # Hard-hit balls
hard_hit_percentage = (hard_hits / total_batted_balls) * 100  # Calculate percentage
)
hard_hit_percentage <- df %>%
filter(!is.na(launch_speed)) %>%  # Ensure exit_velocity is not missing
group_by(batter_id) %>%
summarize(
total_batted_balls = sum(!is.na(launch_speed)),  # Total batted balls
hard_hits = sum(launch_speed >= 95, na.rm = TRUE),  # Hard-hit balls
hard_hit_percentage = (hard_hits / total_batted_balls) * 100  # Calculate percentage
)
exit_velocity_90th <- df %>%
group_by(batter_id) %>%
summarize(
exit_velo_90th = quantile(launch_speed, 0.9, na.rm = TRUE)
)
View(exit_velocity_90th)
final_df2 <- hard_hit_percentage %>%
left_join(exit_velocity_90th %>% select(batter_id, exit_velocity_90th), by = "batter_id")
final_df2 <- hard_hit_percentage %>%
left_join(exit_velocity_90th %>% select(batter_id, exit_velo_90th), by = "batter_id")
final_df2 <- final_df2 %>%
mutate(
# Step 1: Calculate z-scores
z_hh = -1 * (hard_hit_percentage - mean(hard_hit_percentage, na.rm = TRUE)) / sd(hard_hit_percentage, na.rm = TRUE),
z_ev = -1 * (exit_velo_90th - mean(exit_velo_90th, na.rm = TRUE)) / sd(exit_velo_90th, na.rm = TRUE),
) %>%
# Step 2: Combine z-scores
mutate(
combined_z = z_hh + z_ev
) %>%
# Step 3: Scale to the 20-80 scale
mutate(
hit_tool_grade = 50 + (combined_z * 10)
)
hist(final_df2$hit_tool_grade)
View(final_df2)
batter_lookup <- IDtable %>%
select(key_mlbam, name_first, name_last)
batter_lookup$batter_id<-batter_lookup$key_mlbam
# Perform the join with df1
final_df <- final_df%>%
left_join(batter_lookup, by = "batter_id")
final_df2 <- final_df2%>%
left_join(batter_lookup, by = "batter_id")
gs4_auth()
write_sheet(final_df2)
mlbdb<-dbConnect(drv = SQLite(), "statcastdb.sqlite")
library(RSQLite)
library(sabRmetrics)
library(DBI)
library(dplyr)
library(baseballr)
library(googlesheets4)
mlbdb<-dbConnect(drv = SQLite(), "statcastdb.sqlite")
DBI::dbWriteTable(conn = mlbdb, name = "mlbdata", value = data_baseballsavant, overwrite = FALSE, append = TRUE)
data_baseballsavant <- download_baseballsavant(
start_date = "2023-03-01",
end_date = "2023-11-01"
)
